---
interface Book {
  id: string;
  title: string;
  coverImage: string;
  description: string;
  purchaseLink: string;
  ageRange: string;
  price: string;
  samplePages?: string[];
}

// Parse the book data from the provided variable
const books = [
  {
    title: 'Hanuman\'s Journey to the Sun',
    description: 'Unlike man-made superheroes, this Hanuman\'s story is rooted in faith, culture, and values that have inspired generations! Long before Superman or Batman, there was a real hero whose courage knew no bounds. Hanuman, the fearless child with a heart full of devotion and the strength to touch the Sun. Hanuman\'s Journey to the Sun brings to life one of the most powerful and lesser-known tales from Indian history',
    coverImage: './images/book2-cover.svg',
    amazonUrl: 'https://a.co/d/67BRpTy',
    samplePages: [
      './images/sample-pages/book2-page1.png',
      './images/sample-pages/book2-page2.png',
      './images/sample-pages/book2-page3.png',
      './images/sample-pages/book2-page4.png',
      './images/sample-pages/book2-page5.png',
      './images/sample-pages/book2-page6.png',
      './images/sample-pages/book2-page7.png',
      './images/sample-pages/book2-page8.png',
      './images/sample-pages/book2-page9.png',
      './images/sample-pages/book2-page10.png'
    ],
    features: [
      'üêí Illustrated to captivate young minds and imaginations',
      '‚ù§Ô∏è Cultural Preservation about ancient story of Surya and Hanuman',
      'üìö A true tale that\'s more inspiring than any fantasy',
      'ü§î Courage and curiosity',
      'Perfect for ages 4-11'
    ]
  },
  {
    title: 'Diwali in Ayodhya: Hanuman Magic with Chotu and Chutki',
    description: 'A magical journey through the festival of lights in the ancient city of Ayodhya. Join the celebration as the city comes alive with joy, lights, and the spirit of togetherness.',
    coverImage: './images/book1-cover.svg',
    amazonUrl: 'https://www.amazon.ca/dp/B0FBG4GR2N',
    samplePages: [
      './images/sample-pages/book1-page1.svg',
      './images/sample-pages/book1-page2.svg',
      './images/sample-pages/book1-page3.png',
      './images/sample-pages/book1-page4.png',
      './images/sample-pages/book1-page5.png',
      './images/sample-pages/book1-page6.svg'
    ],
    features: [
      'üåæ Glimpse into Indian Village Life',
      'üêí Storytelling Through Beloved Characters- Chotu & Chutki',
      '‚ù§Ô∏è Cultural Preservation about Diwali, Rama, Hanuman',
      'Perfect for ages 4-11'
    ]
  }
];
---

<section id="books" class="book-showcase">
  <div class="container">
    <h2 class="section-title">Featured Books</h2>
    <p class="section-subtitle">Discover the magic of storytelling</p>

    <div class="carousel-container">
      <div class="carousel">
        {books.map((book, index) => (
          <div class="book-card" data-index={index}>
            <div class="book-cover">
              <img 
                src={book.coverImage} 
                alt={`Cover of ${book.title}`}
                width="400"
                height="600"
                loading="lazy"
              />
              <div class="book-overlay">
                <div class="book-actions">
                  <button 
                    class="preview-button"
                    data-book-index={index}
                    aria-label="Preview book"
                  >
                    <i class="fas fa-eye"></i>
                    Preview
                  </button>
                  <a 
                    href={book.amazonUrl}
                    class="cta-button"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <i class="fab fa-amazon"></i>
                    Amazon
                  </a>
                </div>
              </div>
            </div>
            <div class="book-info">
              <h3 class="book-title">{book.title}</h3>
              <p class="book-description">{book.description}</p>
              
              <div class="book-features">
                <h4>Book Features:</h4>
                <ul>
                  {book.features.map(feature => (
                    <li>
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Netflix-style navigation -->
      <div class="carousel-navigation">
        <button 
          class="nav-arrow nav-prev"
          aria-label="Previous book"
          title="Previous book"
        >
          <i class="fas fa-chevron-left"></i>
        </button>
        
        <div class="page-indicators">
          {books.map((book, index) => (
            <button 
              class="page-dot" 
              data-index={index}
              aria-label={`Go to ${book.title}`}
              title={book.title}
            >
            </button>
          ))}
        </div>
        
        <button 
          class="nav-arrow nav-next"
          aria-label="Next book"
          title="Next book"
        >
          <i class="fas fa-chevron-right"></i>
        </button>

        <!-- Swipe hint for mobile -->
        <div class="swipe-hint">
          <i class="fas fa-hand-point-left"></i>
          <span>Swipe to explore more books</span>
          <i class="fas fa-hand-point-right"></i>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Interactive Book Preview Modal -->
<div id="bookPreviewModal" class="book-preview-modal">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close" aria-label="Close preview">
      <i class="fas fa-times"></i>
    </button>
    
    <div class="book-viewer">
      <div class="book-container">
        <div class="book-pages">
          <div class="page left-page">
            <img src="" alt="Left page" id="leftPageImage" />
            <button class="page-nav-btn prev-page-btn" aria-label="Previous page">
              <i class="fas fa-chevron-left"></i>
            </button>
          </div>
          <div class="page right-page">
            <img src="" alt="Right page" id="rightPageImage" />
            <button class="page-nav-btn next-page-btn" aria-label="Next page">
              <i class="fas fa-chevron-right"></i>
            </button>
          </div>
        </div>
        <div class="page-indicator">
          <span id="currentPageNum">1</span> / <span id="totalPages">1</span>
        </div>
        <a href="" id="previewAmazonLink" class="preview-cta-button" target="_blank" rel="noopener noreferrer">
          <i class="fab fa-amazon"></i>
          Amazon
        </a>
      </div>
    </div>
  </div>
</div>

<div class="wavy-divider"></div>

<style>
  .book-showcase {
    padding: 6rem 2rem;
    background: linear-gradient(135deg, var(--background-color) 0%, #f8f9fa 100%);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .section-title {
    text-align: center;
    font-size: 2.5rem;
    color: var(--text-color);
    margin-bottom: 1rem;
  }

  .section-subtitle {
    text-align: center;
    color: var(--text-color);
    opacity: 0.8;
    margin-bottom: 3rem;
  }

  .carousel-container {
    position: relative;
    overflow: hidden;
  }

  .carousel {
    display: flex;
    position: relative;
    transition: transform 0.5s ease-in-out;
    width: 100%;
  }

  .book-card {
    flex: 0 0 100%;
    min-width: 100%;
    display: grid;
    grid-template-columns: 0.8fr 2fr;
    gap: 3rem;
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 10px 30px hsla(0, 20%, 98%, 0.1);
    transition: transform 0.3s ease;
  }



  /* Netflix-style Navigation */
  .carousel-navigation {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 2rem;
    margin-top: 2rem;
  }

  .nav-arrow {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background: white;
    border: 2px solid var(--primary-color);
    color: var(--primary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .nav-arrow:hover {
    background: var(--primary-color);
    color: white;
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }

  .nav-arrow:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: scale(1);
    background: #f5f5f5;
    border-color: #ddd;
    color: #999;
    box-shadow: none;
  }

  .nav-arrow:disabled:hover {
    background: #f5f5f5;
    color: #999;
    transform: scale(1);
  }

  .page-indicators {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .page-dot {
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;
    background: #ddd;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .page-dot:hover {
    background: var(--primary-color);
    transform: scale(1.2);
  }

  .page-dot.active {
    background: var(--primary-color);
    transform: scale(1.3);
  }

  /* Swipe Hint */
  .swipe-hint {
    display: none;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.9rem;
    color: var(--text-color);
    opacity: 0.7;
    animation: pulse 2s infinite;
  }

  .swipe-hint i {
    color: var(--primary-color);
    font-size: 1.1rem;
  }

  @keyframes pulse {
    0%, 100% { opacity: 0.7; }
    50% { opacity: 1; }
  }

  .book-cover {
    position: relative;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    width: 100%;
    max-width: 400px;
    margin: 6rem 0 6rem auto;
    display: inline-block;
    background: transparent;
  }

  .book-cover img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
    background: transparent;
    position: relative;
    z-index: 1;
  }

  .book-cover:hover img {
    transform: scale(1.02);
  }

  .book-overlay {
    position: absolute;
    bottom: 0%;
    left: 50%;
    transform: translateX(-50%);
    z-index: 2;
    width: 100%;
    display: flex;
    justify-content: center;
  }

  .book-actions {
    display: flex;
    flex-direction: row;
    gap: 0.75rem;
    align-items: center;
  }

  .preview-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background: rgba(255, 255, 255, 0.95);
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
    border-radius: 25px;
    font-weight: 600;
    font-size: 0.85rem;
    transition: all 0.3s ease;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
  }

  .preview-button:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
  }

  .preview-button i {
    font-size: 1.1em;
  }

  .book-info {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .book-title {
    font-size: 2rem;
    color: var(--text-color);
    margin-bottom: 0.5rem;
  }

  .book-description {
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--text-color);
    opacity: 0.9;
  }

  .book-features {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 10px;
  }

  .book-features h4 {
    font-size: 1.2rem;
    color: var(--text-color);
    margin-bottom: 1rem;
  }

  .book-features ul {
    list-style: none;
    padding: 0;
  }

  .book-features li {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    color: var(--text-color);
  }

  .book-features i {
    color: var(--primary-color);
  }

  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background: white;
    color: var(--primary-color);
    border-radius: 25px;
    font-weight: 600;
    font-size: 0.85rem;
    transition: all 0.3s ease;
    text-decoration: none;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
    border: 2px solid var(--primary-color);
  }

  .cta-button:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
  }

  .cta-button i {
    font-size: 1.2em;
  }

  /* Book Preview Modal Styles */
  .book-preview-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .book-preview-modal.active {
    display: flex;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
  }

  .modal-content {
    position: relative;
    background: white;
    border-radius: 20px;
    padding: 2rem;
    max-width: 90vw;
    max-height: 90vh;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #666;
    cursor: pointer;
    z-index: 10;
    padding: 0.5rem;
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .modal-close:hover {
    background: #f0f0f0;
    color: #333;
  }

  .book-viewer {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
  }

  .book-container {
    position: relative;
    perspective: 1000px;
    transform-style: preserve-3d;
  }

  .book-pages {
    position: relative;
    width: 100%;
    height: 500px;
    transform-style: preserve-3d;
    display: flex;
    gap: 0;
  }

  .page {
    position: relative;
    width: 50%;
    height: 100%;
    background: white;
    border-radius: 5px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    overflow: hidden;
    transition: transform 0.6s ease-in-out;
  }

  .page img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    display: block;
  }

  .page.left-page {
    border-radius: 5px 0 0 5px;
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
  }

  .page.right-page {
    border-radius: 0 5px 5px 0;
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
  }

  .page-nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(var(--primary-color-rgb, 0, 123, 255), 0.8);
    color: white;
    border: none;
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.2rem;
    opacity: 1;
    z-index: 10;
  }

  .page-nav-btn:hover {
    background: var(--primary-color);
    transform: translateY(-50%) scale(1.1);
  }

  .page-nav-btn:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .prev-page-btn {
    left: 1rem;
  }

  .next-page-btn {
    right: 1rem;
  }

  .page-indicator {
    position: absolute;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(var(--primary-color-rgb, 0, 123, 255), 0.8);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
    z-index: 10;
  }

  .preview-cta-button {
    position: absolute;
    bottom: 1.5rem;
    left: 50%;
    transform: translateX(-50%);
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.6rem 1.2rem;
    background: var(--primary-color);
    color: white;
    border-radius: 25px;
    font-weight: 600;
    font-size: 0.8rem;
    transition: all 0.3s ease;
    text-decoration: none;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
    z-index: 10;
  }

  .preview-cta-button:hover {
    background: #0056b3;
    transform: translateX(-50%) translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
  }

  @media (max-width: 968px) {
    .book-card {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .book-cover {
      max-width: 250px;
    }

    .book-overlay {
      bottom: 10%;
    }

    .book-actions {
      flex-direction: row;
      gap: 0.5rem;
    }

    .preview-button,
    .cta-button {
      padding: 0.6rem 1rem;
      font-size: 0.75rem;
      gap: 0.4rem;
    }

    .preview-button i,
    .cta-button i {
      font-size: 1.1em;
    }





    .carousel-navigation {
      gap: 1.5rem;
    }

    .nav-arrow {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1rem;
    }

    .page-dot {
      width: 0.6rem;
      height: 0.6rem;
    }

    .swipe-hint {
      display: flex;
      font-size: 0.85rem;
    }

    .book-viewer {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .book-pages {
      height: 400px;
    }

    .page-nav-btn {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1rem;
    }

    .preview-cta-button {
      bottom: 3.5rem;
      padding: 0.6rem 1.2rem;
      font-size: 0.8rem;
    }
  }

  @media (max-width: 768px) {
    .book-showcase {
      padding: 4rem 1rem;
    }

    .section-title {
      font-size: 2rem;
    }

    .book-title {
      font-size: 1.75rem;
    }

    .book-description {
      font-size: 1rem;
    }



    .carousel-navigation {
      gap: 1rem;
      flex-direction: column;
    }

    .nav-arrow {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1rem;
    }

    .page-indicators {
      order: -1;
      margin-bottom: 1rem;
    }

    .page-dot {
      width: 0.5rem;
      height: 0.5rem;
    }

    .swipe-hint {
      font-size: 0.8rem;
      gap: 0.5rem;
      order: 1;
    }

    .modal-content {
      padding: 1rem;
      max-width: 95vw;
      max-height: 95vh;
    }

    .book-pages {
      height: 400px;
    }

    .page-nav-btn {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1rem;
    }

    .preview-cta-button {
      bottom: 1.5rem;
      padding: 0.6rem 1.2rem;
      font-size: 0.8rem;
    }
  }
</style>

<script define:vars={{ books }}>
  // Book data is now passed from the frontmatter
  const booksData = books;

  // Carousel functionality
  const carousel = document.querySelector('.carousel');
  const cards = document.querySelectorAll('.book-card');
  const prevButton = document.querySelector('.nav-prev');
  const nextButton = document.querySelector('.nav-next');
  const pageDots = document.querySelectorAll('.page-dot');


  
  let currentIndex = 0;
  const totalCards = cards.length;

  function updateCarousel() {
    if (!carousel) return;
    
    // Update carousel position
    carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
    
    // Update page dots
    pageDots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentIndex);
    });
    
    // Update arrow button states
    if (prevButton) {
      prevButton.disabled = currentIndex === 0;
    }
    if (nextButton) {
      nextButton.disabled = currentIndex === totalCards - 1;
    }
  }

  function goToSlide(index) {
    currentIndex = index;
    updateCarousel();
  }

  function nextSlide() {
    if (currentIndex < totalCards - 1) {
      currentIndex = currentIndex + 1;
      updateCarousel();
    }
  }

  function prevSlide() {
    if (currentIndex > 0) {
      currentIndex = currentIndex - 1;
      updateCarousel();
    }
  }

  // Event listeners for page dots
  pageDots.forEach((dot, index) => {
    dot.addEventListener('click', () => goToSlide(index));
  });

  // Event listeners for arrow buttons
  if (prevButton) {
    prevButton.addEventListener('click', prevSlide);
  }
  if (nextButton) {
    nextButton.addEventListener('click', nextSlide);
  }

  // Initialize first dot as active and update navigation
  if (pageDots.length > 0) {
    pageDots[0].classList.add('active');
  }
  updateCarousel();

  // Auto-advance functionality with loop
  function autoNextSlide() {
    currentIndex = (currentIndex + 1) % totalCards;
    updateCarousel();
  }

  // Optional: Auto-advance slides every 8 seconds
  let autoSlideInterval = setInterval(autoNextSlide, 8000);

  // Pause auto-advance when hovering over carousel or using navigation
  function pauseAutoSlide() {
    clearInterval(autoSlideInterval);
  }

  function resumeAutoSlide() {
    autoSlideInterval = setInterval(autoNextSlide, 8000);
  }

  if (carousel) {
    carousel.addEventListener('mouseenter', pauseAutoSlide);
    carousel.addEventListener('mouseleave', resumeAutoSlide);
  }

  // Pause auto-advance when user interacts with navigation
  pageDots.forEach(dot => {
    dot.addEventListener('click', () => {
      pauseAutoSlide();
      setTimeout(resumeAutoSlide, 5000); // Resume after 5 seconds of no interaction
    });
  });

  if (prevButton) {
    prevButton.addEventListener('click', () => {
      pauseAutoSlide();
      setTimeout(resumeAutoSlide, 5000);
    });
  }

  if (nextButton) {
    nextButton.addEventListener('click', () => {
      pauseAutoSlide();
      setTimeout(resumeAutoSlide, 5000);
    });
  }



  // Book Preview Modal Functionality
  const modal = document.getElementById('bookPreviewModal');
  const modalOverlay = modal?.querySelector('.modal-overlay');
  const closeBtn = modal?.querySelector('.modal-close');
  const leftPageImg = document.getElementById('leftPageImage');
  const rightPageImg = document.getElementById('rightPageImage');
  const currentPageNum = document.getElementById('currentPageNum');
  const totalPages = document.getElementById('totalPages');
  const prevBtn = modal?.querySelector('.prev-page-btn');
  const nextBtn = modal?.querySelector('.next-page-btn');
  const previewAmazonLink = document.getElementById('previewAmazonLink');

  let currentBookIndex = 0;
  let currentPageIndex = 0;
  let currentBookPages = [];

  function openBookPreview(bookIndex) {
    currentBookIndex = bookIndex;
    currentPageIndex = 0;
    currentBookPages = booksData[bookIndex].samplePages || [];
    
    // Update modal content
    previewAmazonLink.href = booksData[bookIndex].amazonUrl;
    totalPages.textContent = currentBookPages.length.toString();
    
    // Load first page
    if (currentBookPages.length > 0) {
      leftPageImg.src = currentBookPages[0];
      if (currentBookPages.length > 1) {
        rightPageImg.src = currentBookPages[1];
      }
    }
    
    updatePageDisplay();
    updatePageControls();
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeBookPreview() {
    modal.classList.remove('active');
    document.body.style.overflow = '';
  }

  function nextPage() {
    if (currentPageIndex + 2 < currentBookPages.length) {
      currentPageIndex += 2;
      updatePageDisplay();
      updatePageControls();
    }
  }

  function prevPage() {
    if (currentPageIndex - 2 >= 0) {
      currentPageIndex -= 2;
      updatePageDisplay();
      updatePageControls();
    }
  }

  function updatePageDisplay() {
    if (currentBookPages.length === 0) return;
    
    // Set left page
    leftPageImg.src = currentBookPages[currentPageIndex];
    
    // Set right page (if available)
    if (currentPageIndex + 1 < currentBookPages.length) {
      rightPageImg.src = currentBookPages[currentPageIndex + 1];
    } else {
      rightPageImg.src = ''; // Clear right page if no more pages
    }
    
    // Update page indicator (show current spread)
    const currentSpread = Math.floor(currentPageIndex / 2) + 1;
    const totalSpreads = Math.ceil(currentBookPages.length / 2);
    currentPageNum.textContent = currentSpread.toString();
    totalPages.textContent = totalSpreads.toString();
  }

  function updatePageControls() {
    prevBtn.disabled = currentPageIndex <= 0;
    nextBtn.disabled = currentPageIndex + 2 >= currentBookPages.length;
  }

  // Event listeners for preview buttons
  document.querySelectorAll('.preview-button').forEach((btn, index) => {
    btn.addEventListener('click', () => openBookPreview(index));
  });

  // Event listeners for modal
  if (closeBtn) closeBtn.addEventListener('click', closeBookPreview);
  if (modalOverlay) modalOverlay.addEventListener('click', closeBookPreview);
  if (prevBtn) prevBtn.addEventListener('click', prevPage);
  if (nextBtn) nextBtn.addEventListener('click', nextPage);

  // Keyboard navigation for carousel
  document.addEventListener('keydown', (e) => {
    if (modal.classList.contains('active')) {
      // Modal keyboard navigation
      switch (e.key) {
        case 'Escape':
          closeBookPreview();
          break;
        case 'ArrowLeft':
          prevPage();
          break;
        case 'ArrowRight':
          nextPage();
          break;
      }
    } else {
      // Carousel keyboard navigation
      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          prevSlide();
          pauseAutoSlide();
          setTimeout(resumeAutoSlide, 5000);
          break;
        case 'ArrowRight':
          e.preventDefault();
          nextSlide();
          pauseAutoSlide();
          setTimeout(resumeAutoSlide, 5000);
          break;
      }
    }
  });

  // Touch/Swipe support for mobile
  let touchStartX = 0;
  let touchEndX = 0;
  let touchStartY = 0;
  let touchEndY = 0;

  if (carousel) {
    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
      touchStartY = e.changedTouches[0].screenY;
    });

    carousel.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      touchEndY = e.changedTouches[0].screenY;
      
      // Check if it's a horizontal swipe (not vertical scroll)
      const horizontalDistance = Math.abs(touchEndX - touchStartX);
      const verticalDistance = Math.abs(touchEndY - touchStartY);
      
      if (horizontalDistance > verticalDistance && horizontalDistance > 50) {
        if (touchEndX < touchStartX) {
          // Swipe left - go to next
          nextSlide();
        } else {
          // Swipe right - go to previous
          prevSlide();
        }
        pauseAutoSlide();
        setTimeout(resumeAutoSlide, 5000);
      }
    });
  }
</script> 